import { type NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { signIn, signOut, useSession } from 'next-auth/react'

import { trpc } from '../utils/trpc'
import { useEffect, useState } from 'react'
import { pokemonSchema } from '../server/trpc/router/pokemons'
import { z } from 'zod'
import PokemonCard from '../components/pokemon-card'

export type Pokemon = z.infer<typeof pokemonSchema>

const randomNumber = () => Math.floor(Math.random() * 100) + 1

const Home: NextPage = () => {
  const [randomId1, setRandomId1] = useState(() => randomNumber())
  const [randomId2, setRandomId2] = useState(() => randomNumber())

  const randomPokemon1 = trpc.pokemons.getById.useQuery(randomId1,{keepPreviousData: true})
  const randomPokemon2 = trpc.pokemons.getById.useQuery(randomId2,{keepPreviousData: true})

  const refreshRandomPokemons = () => {
    setRandomId1(randomNumber())
    setRandomId2(randomNumber())
  }

  useEffect(() => {
    randomPokemon1.refetch()
    randomPokemon2.refetch()
  }, [randomId1, randomId2])

  return (
    <>
      <Head>
        <title>Pokemon</title>
        <meta name='description' content='Generated by create-t3-app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className='flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]'>
        <div className='container flex flex-col items-center justify-center gap-12 px-4 py-16 '>
          <h1 className='text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]'>
            Vote For <span className='text-[hsl(280,100%,70%)]'>The Most Beautiful</span> Pokemon
          </h1>
          <div className='grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8'>
            {randomPokemon1.data && randomPokemon2.data && (
              <>
                <PokemonCard
                  pokemon={randomPokemon1.data}
                  refreshRandomPokemons={refreshRandomPokemons}
                />
                <PokemonCard
                  pokemon={randomPokemon2.data}
                  refreshRandomPokemons={refreshRandomPokemons}
                />
              </>
            )}
          </div>

          <div className='flex flex-col items-center gap-2'>
            {/* <p className='text-2xl text-white'>
              {hello.data ? hello.data.greeting : 'Loading tRPC query...'}
            </p> */}
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  )
}

export default Home

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession()

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  )

  return (
    <div className='flex flex-col items-center justify-center gap-4'>
      <p className='text-center text-2xl text-white'>
        {sessionData && <span>Logged in as {sessionData?.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className='rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20'
        onClick={sessionData ? () => signOut() : () => signIn()}>
        {sessionData ? 'Sign out' : 'Sign in'}
      </button>
    </div>
  )
}
